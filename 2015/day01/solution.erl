-module(santa_floor).\n-export([calculate_floor/1, find_basement_position/1, main/1]).\n\n% Calculate the final floor based on instructions\ncalculate_floor(Instructions) ->\n    calculate_floor(Instructions, 0).\n\ncalculate_floor([], Floor) ->\n    Floor;\ncalculate_floor([H|T], Floor) ->\n    NewFloor = case H of\n        40 -> Floor + 1;  % '(' character\n        41 -> Floor - 1;  % ')' character\n        _ -> Floor\n    end,\n    calculate_floor(T, NewFloor).\n\n% Find the position of the first character that causes Santa to enter the basement (floor -1)\nfind_basement_position(Instructions) ->\n    find_basement_position(Instructions, 0, 1).\n\nfind_basement_position([], _Floor, _Position) ->\n    -1;\nfind_basement_position([H|T], Floor, Position) ->\n    NewFloor = case H of\n        40 -> Floor + 1;  % '(' character\n        41 -> Floor - 1;  % ')' character\n        _ -> Floor\n    end,\n    if\n        NewFloor == -1 ->\n            Position;\n        true ->\n            find_basement_position(T, NewFloor, Position + 1)\n    end.\n\n% Main function that handles file input and outputs results\nmain(Args) ->\n    InputFile = case Args of\n        [] -> \"input.txt\";\n        [File] -> File\n    end,\n    \n    case file:read_file(InputFile) of\n        {ok, BinContent} ->\n            Instructions = string:trim(binary_to_list(BinContent)),\n            \n            % Part A: Calculate final floor\n            FinalFloor = calculate_floor(Instructions),\n            io:format(\"Santa ends up on floor ~p~n\", [FinalFloor]),\n            \n            % Part B: Find position where Santa first enters basement\n            BasementPos = find_basement_position(Instructions),\n            if\n                BasementPos =/= -1 ->\n                    io:format(\"The first character that causes Santa to enter the basement is at position ~p~n\", [BasementPos]);\n                true ->\n                    io:format(\"Santa never enters the basement~n\")\n            end;\n        {error, _Reason} ->\n            io:format(\"~s not found. Please create the file with the puzzle input.~n\", [InputFile]),\n            io:format(\"Example usage: calculate_floor(\\\"(((\\\") returns ~p~n\", [calculate_floor(\"(((\")]),\n            io:format(\"Example usage: find_basement_position(\\\"()())\\\") returns ~p~n\", [find_basement_position(\"()())\")])\n    end.